#include <iostream>
#include <limits.h>
#include <stdlib.h>
#include <chrono>
#include <vector>
#include <iomanip>
using namespace std;
using namespace std::chrono;

#define V 1445

void generateGraph(int graph[V][V]) {
    srand(10);
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (i == j) {
                graph[i][j] = 0;
            } else {
                graph[i][j] = rand() % 10000 + 1;
            }
        }
    }
}

long long sumGraph(int graph[V][V]) {
    long long totalSum = 0;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            totalSum += graph[i][j];
        }
    }
    
    return totalSum;
}

void printPath(int parent[], int vertex) {
    if (parent[vertex] == -1) {
        cout << vertex + 1 << " ";
        return;
    }
    printPath(parent, parent[vertex]);
    cout << vertex + 1 << " ";
}

void dijkstra(int graph[V][V], int source, int iteration) {
    int distances[V];
    bool visited[V];
    int parent[V];

    for (int vertex = 0; vertex < V; vertex++) {
        distances[vertex] = INT_MAX;
        visited[vertex] = false;
        parent[vertex] = -1;
    }

    distances[source] = 0;

    for (int count = 0; count < V - 1; count++) {
        int minDistance = INT_MAX, minVertex = -1;

        for (int v = 0; v < V; v++) {
            if (!visited[v] && distances[v] <= minDistance) {
                minDistance = distances[v];
                minVertex = v;
            }
        }

        if (minVertex == -1) break;

        visited[minVertex] = true;

        for (int v = 0; v < V; v++) {
            if (!visited[v] && graph[minVertex][v] != 0 && distances[minVertex] != INT_MAX &&
                distances[minVertex] + graph[minVertex][v] < distances[v]) {
                distances[v] = distances[minVertex] + graph[minVertex][v];
                parent[v] = minVertex;
            }
        }

    }

    cout << "\nIteration " << iteration + 1 << ":\n";

    int maxDist = INT_MIN;
    for (int i = 0; i < V; i++) {
        if (distances[i] != INT_MAX) {
            maxDist = max(maxDist, distances[i]);
        }
    }
    cout << "Maximum distance from source to any vertex: " << maxDist << endl;

    if (distances[V - 1] == INT_MAX) {
        cout << "No path exists from source " << source + 1 << " to vertex " << V << endl;
    } else {
        cout << "Most optimal path from source " << source + 1 << " to vertex " << V << ": ";
        printPath(parent, V - 1);
        cout << "\nPath cost: " << distances[V - 1] << endl;
    }

    int farthestVertex = -1;
    int farthestDistance = INT_MIN;
    for (int i = 0; i < V; i++) {
        if (distances[i] != INT_MAX && distances[i] > farthestDistance) {
            farthestDistance = distances[i];
            farthestVertex = i;
        }
    }

    if (farthestVertex == -1) {
        cout << "No reachable vertex found for the least optimal path.\n";
    } else {
        cout << "Least optimal path from source " << source + 1 << " to vertex " << farthestVertex + 1 << ": ";
        printPath(parent, farthestVertex);
        cout << "\nPath cost: " << farthestDistance << endl;
    }
}

int main() {
        
    int graph[V][V];

    generateGraph(graph);

    for (int i = 0; i < V; ++i) {
        dijkstra(graph, i, i);
    }

    long long totalSum = sumGraph(graph);
    cout << "\nTotal sum of elements: " << totalSum << endl;
    

    return 0;
    
}
